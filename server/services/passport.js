const passport = require('passport')
const GoogleStrategy = require('passport-google-oauth20').Strategy
const mongoose = require('mongoose')
const keys = require('../config/keys')

// fetches the model class out of mongoose
const User = mongoose.model('users')

passport.serializeUser((user, done) => {
    // user.id is shortcut to user._id.$oid which is a unique identifier automatically generated by mongo
    // user.id is different from the googleId
    done(null, user.id)
})

passport.deserializeUser((id, done) => {
    User.findById(id)
        .then(user => {
            done(null, user)
        })
})

// ---- begin passport auth
passport.use(new GoogleStrategy({
        clientID: keys.googleClientID,
        clientSecret: keys.googleClientSecret,
        callbackURL: '/auth/google/callback',
        proxy: true
    }, (accessToken, refreshToken, profile, done) => {
        
        User.findOne({googleId: profile.id})
            .then(existingUser => {
                if (existingUser) {
                    // already have a record with given profile ID
                    done(null, existingUser)
                } else {
                    // user not yet in db; create a new user
                    new User({ googleId: profile.id }).save()
                        .then(user => done(null, user))
                }
            })
    })
)
